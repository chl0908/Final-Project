top_three <- people[c(1,2,3)]
# Create a vector `top_three` that only contains the first three movies in the vector
top_three <- movies[c(1,2,3)]
source('~/Desktop/INFO201/a2-r-intro-chl0908/assignment.R')
movies <- c("Harry Potter","Jumanji", "The Post", "The Commuter", "Proud Mary","Paddington 2")
top_three <- movies[c(1,2,3)]
movies <- c("Harry Potter","Jumanji", "The Post", "The Commuter", "Proud Mary","Paddington 2")
# Create a vector `top_three` that only contains the first three movies in the vector
top_three <- movies[c(1,2,3)]
movies <- c("Harry Potter","Jumanji", "The Post", "The Commuter", "Proud Mary","Paddington 2")
top_three <- movies[c(1,2,3)]
toi_three
top_three
movies
> movies <- c("Harry Potter","Jumanji", "The Post", "The Commuter", "Proud Mary","Paddington 2")
# Create a vector `movies` that contains the names of six movies you like
movies <- c("Harry Potter","Jumanji", "The Post", "The Commuter", "Proud Mary","Paddington 2")
# Using your vector and the paste method, create a vector `excited` that adds the phrase -
# " is a great movie!" to the end of each element in your movies vector
excited <- "is a great movie"
top_three
movies
movies <- c("Harry Potter","Jumanji", "The Post", "The Commuter", "Proud Mary","Paddington 2")
movies
movies <- c("Harry Potter", "Jumanji", "The Post", "The Commuter", "Proud Mary","Paddington 2")
movies
movies <- c("Harry Potter", "Jumanji", "The Commuter", "Proud Mary","Paddington 2")
movies
movies <- c("Harry Potter","Jumanji", "The Post", "The Commuter", "Proud Mary","Paddington 2")
movies
top_three
without_four <- movies[c(1,2,3,5,6)]
without_four
# Create a vector `numbers` that is the numbers 700 through 999
number <- seq(700,999)
number
len <- length(number)
len
# Using the `mean` function, create a variable `numbers_mean` that is the mean of your vector `numbers`
mean <- mean(number)
mean
# Using the `mean` function, create a variable `numbers_mean` that is the mean of your vector `numbers`
numbers_mean <- mean(number)
# Using the `median` function, create a variable `numbers_median` that is the median of your vector `numbers`
numbers_median <- median(number)
# Create a vector `lower_numbers` that is the numbers 500:699
lower_numbers <- seq(500,699)
# Create a vector `all_numbers` that combines your `lower_numbers` and `numbers` vectors
all_number <- paste(lower_numbers, numbers)
numbers <- seq(700,999)
len <- length(numbers)
numbers_mean <- mean(numbers)
numbers_median <- median(numbers)
all_number <- paste(lower_numbers, numbers)
all_number
lenth(numbers)
length(numbers)
length(lower_numbers)
length(all_number)
makeIntroduction<- function(name, age) {
answer <- str_c("Hello, my name is "name", and I'm "age"years old")
return(answer)
}
excited <- str_c(movies[c(1,2,3)], "is a great movie")
excited <- str_c(movies[c(1,2,3)], "is a great movie")
str_c("x", "y")
makeIntroduction<- function(name, age) {
answer <- paste("Hello, my name is "name", and I'm "age"years old")
return(answer)
}
str_c("x", "y")
makeIntroduction<- function(name, age) {
answer <- paste("Hello, my name is "name", and I'm "age"years old")
print(answer)
}
answer <- paste("Hello, my name is ", name, ", and I'm ", age, "years old")
makeIntroduction<- function(name, age) {
answer <- paste("Hello, my name is ", name, ", and I'm ", age, "years old")
print(answer)
}
makeIntroduction("sas", 21)
my_intro <- makeIntroduction(my_name, my_age)
# Create a variable `my_intro` by passing your variables `my_name` and `my_age` into your `makeIntroduction`
# function
my_intro <- makeIntroduction(c(my_name), my_age)
# Create a variable `my_intro` by passing your variables `my_name` and `my_age` into your `makeIntroduction`
# function
my_intro <- makeIntroduction("my_name", my_age)
toupper(my_intro)
# Create a new variable `loud_intro`, which is your `my_intro` variable in all upper-case letters
toupper(c(my_intro))
install.packages("stringr")
library("stringr")
str_c("x","y")
minites_rule <- minutes_in_day > hours_in_year
minites_rule <- minutes_in_day > hours_in_year
minutes_in_day = 60 * 24
hours_in_year = 24 * 365
# Create a variable `minutes_rule` that is a boolean value (TRUE/FALSE) by logical operations
# It should be TRUE if there are more minutes in a day than hours in a year, otherwise FALSE
minites_rule <- minutes_in_day > hours_in_year
minites_rule <- minutes_in_day > hours_in_year
minites_rule
makeIntroduction<- function(name, age) {
answer <- paste("Hello, my name is ", name, ", and I'm ", age, "years old")
print(answer)
}
makeIntroduction("hongli", 21)
my_intro <- makeIntroduction(my_name, my_age)
my_name = "Chen"
my_age = 21
my_intro <- makeIntroduction(my_name, my_age)
casual_intro <- sub("Hello, my name is ","Hey, I'm\" in your 'my_intro'", makeIntroduction(my_name, my_age))
causal_intro
casual_intro
casual_intro <- sub("Hello, my name is ","Hey, I'm\" in your 'my_intro'", makeIntroduction(my_name, my_age))
casuak_intro
casual_intro
loud_intro<- toupper(my_intro)
loud_intro
# Create a new variable `quiet_intro`, which is your `my_intro` variable in all lower-case letters
quiet_intro<- tolower(my_intro)
quiet_intro
capitalized<- str_to_tittle(my_intro)
capitalized<- str_to_title(my_intro)
str_c("x""x")
install.packages("stringr")
library("stringr")
capitalized<- str_to_title(my_intro)
capitalized
occurences<- str_count(my_intro, pattern = "e")
occurences
Double<- function(x) {
answer<- x*x
return(answer)
Double<- function(x) {
answer<- x*x
return(answer)
}
a
1+@
Double<- function(x) {
answer<- x*x
return(answer)
}
double(2)
Double(23)
Double(2)
Double(5)
Double<- function(x) {
answer<- x*2
return(answer)
}
Double(23)
minutes_in_day<- Double(minutes_in_day)
minutes_in_two_day<- Double(minutes_in_day)
minutes_in_two_day
minutes_in_day
minutes_in_day = 60 * 24
minutes_in_day
minutes_in_two_day
minutes_in_two_day
minutes_in_day
> minutes_in_two_day<- Double(minutes_in_day)
> minutes_in_two_day = Double(minutes_in_day)
minutes_in_two_day<- Double(minutes_in_day)
minutes_in_two_day
ThirdPower<- function(y){
result<- y*y*y
return(result)
}
ThirdPower(5)
twenty_seven <- ThirdPower(3)
twenty_seven
movies <- c("Harry Potter","Jumanji", "The Post", "The Commuter", "Proud Mary","Paddington 2")
top_three <- movies[c(1,2,3)]
excited <- str_c(movies[c(1,2,3)], "is a great movie")
excited
excited <- str_c(movies[c(1,2,3,4,5,6)], "is a great movie")
without_four <- movies[c(1,2,3,5,6)]
numbers <- seq(700,999)
len <- length(numbers)
numbers_mean <- mean(numbers)
numbers_median <- median(numbers)
lower_numbers <- seq(500,699)
all_number <- paste(lower_numbers, numbers)
all_number
all_number <- c(lower_numbers, numbers)
all_number
length(numbers)
length)lower_numbers
length(lower_numbers)
length(all_number)
today<- as.Date(2018-01-22)
today<- as.Date("2018-01-22")
spring_break<- as.Date("Mar 10th, 2019")
days_to_break <- spring_break-today
spring_break<- as.Date("2019-03-10")
days_to_break <- spring_break-today
days_to_break
days_to_break <- spring_break - today
days_to_break
spring_break<- as.Date("2019-03-11")
days_to_break
days_to_break <- spring_break - today
spring_break<- as.Date("2019-03-11")
days_to_break
spring_break<- as.Date("2019-03-10")
days_to_break <- spring_break - today
MakeBirthdayIntro <- function(my_name, my_age, date){
countdown<- as.Date(date) - today
speak<- paste("Hello, my name is", my_name, "and I'm", my_age "years old. In" countdown "days I'll be {new_age}"
return(speak)
}
MakeBirthdayIntro <- function(my_name, my_age, date){
countdown<- as.Date(date) - today
new_age<- my_age + 1
speak<- paste("Hello, my name is", my_name, "and I'm", my_age, "years old. In", countdown, "days I'll be", new_age
return(speak)
}
MakeBirthdayIntro <- function(my_name, my_age, date){
birthday<- as.Date(date)
countdown<- birthday - today
new_age<- my_age + 1
speak<- paste("Hello, my name is", my_name, "and I'm", my_age, "years old. In", countdown, "days I'll be", new_age
return(speak)
}
MakeBirthdayIntro <- function(my_name, my_age, date){
birthday<- as.Date(date)
countdown<- birthday - today
new_age<- my_age + 1
speak<- paste(MakeBirthdayIntro(my_name, my_age), "In", countdown, "days I'll be", new_age)
return(speak)
}
MakeBirthdayIntro(Chen, 21, 2018-2-3)
MakeBirthdayIntro(Chen, 21, 2018-2-3)
MakeBirthdayIntro(Chen, 21, 2018-02-03)
source('~/Desktop/Archive 3/a2-core-skills-krystalflashback/aJia.R')
source('~/Desktop/Archive 3/a2-core-skills-krystalflashback/aJia.R')
source('~/Desktop/Archive 3/a2-core-skills-krystalflashback/aJia.R')
MakeBirthdayIntro <- function(name, age, date) {
birthday <- as.Date(date)
days.to.birthday <- birthday - today
new.age <- age + 1
sentence <- paste(MakeIntroduction(name, age), 'In', days.to.birthday, 'days I\'ll be', new.age)
return(sentence)
}
MakeBirthdayIntro(Chen,21,2018-3-2)
MakeBirthdayIntro(Chen,21,2018-03-12)
source('~/Desktop/INFO201/a2-r-intro-chl0908/assignment.R')
RemoveDigits <- function(vector) {
final_result <- gsub('[0-9]','',vector)
return(final.string)
}
RemoveDigits(123Hongkl)
RemoveDigits("123Hongkl")
RemoveDigits <- function(vector) {
final_result <- gsub('[0-9]','',vector)
return(final_result)
}
RemoveDigits(123Hongkl)
RemoveDigits("123Hongkl")
install.packages("lubridate")
library("lubridate")
RemoveDigits("CHEM 142","CHEM 234")
RemoveDigits("CHEM 142","CHEM 234")
RemoveDigits("CHEM 142")
RemoveDigits <- function(string) {
final_result <- gsub('[0-9]','',string)
return(final_result)
RemoveDigits <- function(string) {
final_result <- gsub('[0-9]','',string)
return(final_result)
}
asdf
asf
12
+A
/
RemoveDigits <- function(vector) {
final_result <- gsub('[0-9]','',vector)
return(final_result)
}
RemoveDigits <- function(string) {
final_result <- gsub('[0-9]','',string)
return(final_result)
}
RemoveDigits(kane 120)
RemoveDigits("kane 120")
MakeBirthdayIntro(Chen,21,"2018-02-03")
my_bday_intro<- MakeBirthdayIntro(my_name, my_age,"2018-09-08")
if(any(grepl("[[:digit:]]","CHEM 142"))==TRUE){
cat("Oh no!")
} else {
cat("Yay!")
}
for (i in 1)
for (i in 1:4) {}
data.frame(zip=98195, name"Huang", student=FALSE)
data.frame(zip=98195, name="Huang", student=FALSE)
employee<- data.frame(zip=98195, name="Huang", student=FALSE)
employee<- data.frame(zip=c(98188,98888), name=c("Huang","Javad"), student=c(FALSE,TRUE))
employee
[:digit:]
employee[[1]]
employee[c("zip", "student")]
employy$name
employee$name
height<- c(165, 170, 177, 199, 182)
weight<- c(66, 77, 90, 82, 92)
health<- data.frame(height, weight)
health
health<- data.frame(height, weight*2.2)
data.frame(height, weight*2.2)
data.frame(height, wght=weight*2.2)
health$height
helth$weight
health$weight
good<- 1,2,3
good<- c(1,2,3)
[[:digit:]]
digit
[:digit]
[:digit:]
[[:digit:]]
health$height[1]
health[1,1]
health[1:3,1]
health[1,1:2]
health[1,1:3]
health[-1,1:2]
health[,2]
health[1]
health[,1]
health[,1, drop=FASE;]
health[,1, drop=FALSE]
health[,1:2]
health[1:2]
health[1:3]
health[1:3,]
health[health$weight < 175, ]
health[health$height < 175, ]
health$height
health$height < 175
health$height<175
health[health$height<175,]
health[health$height<175,weight]
health[health$height<175,"weight]
health[health$height<175,"weight"]
health[health$height<175,"weight"]
View(health)
health$weight/(health$height/100)^2
health$bmi<- health$weight/(health$height/100)^2
health
overweight <- health$bmi >25
overweight
health$overweight <- health$bmi >25
health
sum(health$overweight)
johnny <- c(200,80,NA,NA)
rbind(health,johnny)
johnny <- date.frame(200,80,NA,NA)
johnny <- data.frame(200,80,NA,NA)
rbind(health,johnny)
johnny <- data.frame(height =200, weight=80, bmi=NA overweight=NA)
johnny <- data.frame(height =200, weight=80, bmi=NA,overweight=NA)
rbind(health,jognny)
rbind(health,johnny)
rbind(health,johnny)
source('~/Desktop/INFO201/ch09-dataframes/exercise-1/exercise.R')
resilt
result
source('~/Desktop/INFO201/ch09-dataframes/exercise-1/exercise.R')
result
opponents <- "Atlanta Falcons"
3!
dbinom(3,3,0.44)
install("nycflights13")
install.packages("nycflights13")
library(nycflights13)
print(flights, n=3)
tail(flights, 2)
question_one <- select(flights, month.abb)
question_one <- select(flights, month)
install.packages("dplyr")
library("dplyr")
question_one <- select(flights, month.abb)
question_one <- select(flights, month)
question_one
question_one <- select(flights, month, day, origin, destination, carrier, tailnum)
question_one <- select(flights, month, day, origin, dest, carrier, tailnum)
question_one
question_two <- filter(flights, dest==SEA)
question_two <- filter(flights, dest=="SEA")
question_two
question_two <- filter(question_one, dest=="SEA")
question_two
question_two
question_one <- select(flights, month, day, origin, dest, carrier, tailnum)
question_one <- select(flights, month, day, origin, dest, carrier, tailnum) %>%
filter(dest="SEA")
filter(dest=="SEA")
question_two
flight %>% filter(dest == "SEA") %>% select(dest)
flights %>% filter(dest == "SEA") %>% select(dest)
mutate(ISOdate(2013,month,day,sep="-"))
mutate(ISOdate(2013,month,day,sep= "-"))
mutate(flight(ISOdate(2013,month,day,sep= "-")))
mutate(flights(ISOdate(2013,month,day,sep= "-")))
mutate(ISOdate(2013,month,day,sep= "-"))
flights %>%
select(month,day,origin, dest, carrier, tailnum) %>%
arrange(dest, carrier)
nrow(flights)
flights %>% summarize(n=n())
flights %>% count()
flights %>% filter(dest="SEA")
flights %>% filter(dest=="SEA") %>% summarize(np=tailnum %>% unique() %>% length() )
flights %>%  group_by(origin) %>%  summarise(delay = mean(dep_delay))
flights %>%  group_by(origin) %>%  summarise(delay = mean(dep_delay))
View(flights)
flights %>%  group_by(origin) %>%  summarise(delay = mean(dep_delay), na.rm = TRUE)
flights %>%  group_by(origin) %>%  summarise(delay = mean(dep_delay, na.rm = TRUE))
flights %>%  group_by(origin) %>%  summarise(delay = mean(dep_delay, na.rm = TRUE))
flights %>%  group_by(origin) %>%  summarise(delay = mean(dep_delay, na.rm = TRUE))
%>% summarise(arrive = mean(arr_delay, na.rm = TRUE))
flights %>%  group_by(origin) %>%  summarise(delay = mean(dep_delay, na.rm = TRUE))
%>% summarise(arrive = mean(arr_delay, na.rm = TRUE))
flights %>%  group_by(origin) %>%  summarise(delay = mean(dep_delay, na.rm = TRUE)) %>% summarise(arrive = mean(arr_delay, na.rm = TRUE))
flights %>%  group_by(origin) %>%  summarise(delay = mean(dep_delay, na.rm = TRUE), adelay = mean(arr_delay, na.rm = TRUE)
)
flights %>% group_by(carrier)
flight %>% filter(dest == "SEA")
flights %>% filter(dest == "SEA") %>% group_by(origin) %>% count()
flights %>% filter(dest == "SEA") %>% group_by(origin) %>% ungroup () %>% count()
flights %>% filter(dest == "SEA") %>% group_by(origin)
flights %>% filter(dest == "SEA") %>% group_by(origin) %>% count()
flights %>%  filter(dest == "SEA") %>% summarise(delay = mean(dep_delay, na.rm = TRUE))
flights %>%  filter(dest == "SEA") %>% group_by(carrier) %>% summarise(delay = mean(dep_delay, na.rm = TRUE))
flights %>% filter(dest == "SEA")
flights %>% filter(dest == "SEA", arr_delay > 0) %>% group_by(carrier) %>%  summarize(d = mean(arr_delay, na.rm=TRUE))
flights %>% filter(dest == "SEA", arr_delay > 0) %>% group_by(carrier) %>%  summarize(d = mean(arr_delay, na.rm=TRUE)) %>% arrange(desc(d))
flights %>% filter(dest == "SEA", arr_delay > 0) %>% group_by(carrier) %>%  summarize(d = mean(arr_delay, na.rm=TRUE), s = mean(arr_time, na.rm = TRUE)) %>% arrange(desc(d))
flights %>% filter(dest == "SEA", arr_delay > 0) %>% group_by(carrier) %>%  summarize(d = mean(arr_delay, na.rm=TRUE), s = mean(arr_time, na.rm = TRUE)) %>% arrange(desc(d), DESC(S))
flights %>% filter(dest == "SEA", arr_delay > 0) %>% group_by(carrier) %>%  summarize(d = mean(arr_delay, na.rm=TRUE), s = mean(arr_time, na.rm = TRUE)) %>% arrange(desc(d), desc(s)
)
install.packages("ggmap")
library(ggmap)
pi
pi <- 4
pu
pi
base::pi
base pi
ggmap::qmap("Seattle")
library(httr)
install.packages("httr")
library(httr)
uri <- "http://api.github.com/users/info201b-wi2018/repos"
query <- list(per_page=3)
res <- GET(uri,query=query)
res
typeof(res)
res <- GET(uri,query=query)
res <- GET(uri,query=query)
ghBase <- "https://api.github.com/"
resource<- "search/repositories"
uri<- paste0(ghBase,resource)
qParams <- list(q="dplyr")
result <- GET(uri, query=qParams)
data<- result %>%
content("text") %>%
fromJSON()
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
-1.28
1.28 * 1.2 / 0,5
1.28 * 1.2 / 0.5
(1.28 * 1.2 / 0.5)^2
√173
1.96*4.8
9.408^2
1.6^2
2.17*3.4/2
3.689^_^
3.689^2
2.575 * 8/2
10.3^2
2。030*（6.7/sqrt(36))
2。030*（6.7/sqrt(36))
14.257
49.588
-5 / 20
-0.25 / sqrt(20)
(80.9-85)/11.6/sqrt(25)
R
install.packages("tidyverse")
library(tidyverse)
R
shiny::runApp('Desktop/INFO201/a8-shiny-chl0908')
install.packages('rsconnect')
rsconnect::setAccountInfo(name='chl0908', token='582C4A23652100CFE2B660DF15596CAE', secret='wIbxbGqFkKdmfIcPqT/O3XgabzXLI10mNyATrXaL')
library(rsconnect)
rsconnect::deployApp('path/to/your/app')
runApp('Desktop/INFO201/a8-shiny-chl0908')
setwd"~/Desktop/INFO201/Final-Project/"
setwd"~/Desktop/INFO201/Final-Project"
setwd("~/Desktop/INFO201/Final-Project")
read.delim("data/table_43a_arrests_by_race_2013.xls")
crime <- read.csv("data/Crime_Data_from_2010_to_Present.csv")
View(crime)
shiny::runApp('~/Desktop/INFO201/a8-shiny-chl0908')
